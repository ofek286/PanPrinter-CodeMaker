/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panprinter.backup;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import jssc.*;
import panprinter.*;

/**
 *
 * @author O.S.
 * @version 26/02/2016 - alpha
 */
public class CodeMaker extends javax.swing.JFrame {
    
    private static String _code;
    
    private final static String table16x16 = "16x16";
    
    private final static String table15x15 = "15x15";
    
    private final static String table18x18 = "18x18";
    
    private final static String table19x19 = "19x19";
    
    private final static String[] tables = {table15x15, table18x18};
    
    private static String _fileName;
    
    private static String _COM;
    
    private final static int INDEX_15C = 0, INDEX_16C = -1, INDEX_18C = 1, INDEX_19C = -1;
    
    private static String[] _args;
    /**
     * Creates new form CodeMaker
     */
    public CodeMaker() {
        initComponents();
        if (_args != null && _args.length > 0 && _args[0] != null)
            fileOpener(new File(_args[0]));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        codeScreen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serialConsole = new javax.swing.JTextArea();
        tableChanger = new javax.swing.JComboBox();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        table18C = new panprinter.Table18x18();
        table15C = new panprinter.Table15x15();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comChooser = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        openFileButton = new javax.swing.JButton();
        existingFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        codeScreen.setText("Waiting for code");
        codeScreen.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(codeScreen);

        serialConsole.setEditable(false);
        serialConsole.setBackground(new java.awt.Color(0, 0, 0));
        serialConsole.setColumns(20);
        serialConsole.setForeground(new java.awt.Color(51, 204, 0));
        serialConsole.setRows(5);
        DefaultCaret caret = (DefaultCaret)serialConsole.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane2.setViewportView(serialConsole);

        tableChanger.setModel(new javax.swing.DefaultComboBoxModel(tables));
        tableChanger.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tableChangerItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(table15C, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(table18C, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 24, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(table15C, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                    .addComponent(table18C, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(table18C, 1);
        jLayeredPane1.setLayer(table15C, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setText("בחירת גודל לוח הציור");

        jLabel2.setText("בחירת רכיב התקשורת");

        String[] portNames = SerialPortList.getPortNames();
        comChooser.setModel(new javax.swing.DefaultComboBoxModel(portNames));
        comChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comChooserItemStateChanged(evt);
            }
        });

        jLabel3.setText("הקוד אותו התוכנה מפיקה");

        jLabel4.setText("חלון ניטור התקשורת (Logger)");

        openFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panprinter/icon_open_file_40x40.png"))); // NOI18N
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        existingFileButton.setText("הפעלת תוכנית הדפסה קיימת");
        existingFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(46, 46, 46))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(tableChanger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(comChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)))
                        .addComponent(openFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(existingFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(52, 52, 52))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tableChanger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(7, 7, 7)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(openFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(existingFileButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        table15C.setVisible(true);
        //table16C.setVisible(false);
        table18C.setVisible(false);
        //table19C.setVisible(false);
        _COM = (String) (comChooser.getSelectedItem());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableChangerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tableChangerItemStateChanged
        switch ((String) (evt.getItem()))
        {
            case table15x15:
            {
                table15C.setVisible(true);
                //table16C.setVisible(false);
                table18C.setVisible(false);
                //table19C.setVisible(false);
                repaint();
                revalidate();
                break;
            } 
            case table16x16:
            {
                table15C.setVisible(false);
                //table16C.setVisible(true);
                table18C.setVisible(false);
                //table19C.setVisible(false);
                repaint();
                revalidate();
                break;
            }
            case table18x18:
            {
                table15C.setVisible(false);
                //table16C.setVisible(false);
                table18C.setVisible(true);
                //table19C.setVisible(false);
                repaint();
                revalidate();
                break;
            }
            case table19x19:
            {
                table15C.setVisible(false);
                //table16C.setVisible(false);
                table18C.setVisible(false);
                //table19C.setVisible(true);
                repaint();
                revalidate();
                break;
            }
        }
    }//GEN-LAST:event_tableChangerItemStateChanged

    private void comChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comChooserItemStateChanged
        _COM = (String) (evt.getItem());
    }//GEN-LAST:event_comChooserItemStateChanged

    private void existingFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingFileButtonActionPerformed
        _fileName = JOptionPane.showInputDialog("שם הקובץ:");
        if (!_fileName.endsWith(".osp"))
            _fileName += ".osp";
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
           
            @Override
            protected Void doInBackground() throws Exception {
                 SerialPort serialPort = new SerialPort(_COM);
                 try {
                     serialConsole.setText(serialConsole.getText() + "Port opened: " + serialPort.openPort() + "\n");
                     serialConsole.setText(serialConsole.getText() + "printFile " + _fileName + "\n");
                     serialPort.writeString("printFile " + _fileName);
                     Thread.sleep(3000);
                     String currLine;
                     do
                     {
                         currLine = serialPort.readString();
                         serialConsole.setText(serialConsole.getText() + currLine + "\n");
                         Thread.sleep(3000);
                     }
                     while (!currLine.equals("endPrint"));
                     serialPort.closePort();
                     //System.out.println("Params setted: " + serialPort.setParams(9600, 8, 1, 0));
                     //System.out.println("\"Hello World!!!\" successfully writen to port: " + serialPort.writeBytes("Hello World!!!".getBytes()));

                 }
                 catch (SerialPortException ex){
                     System.out.println(ex);
                 } 
                 catch (InterruptedException ex) {
                     Logger.getLogger(CodeMaker.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 catch (NoSuchElementException ex) {
                     //FOff
                 }
                 finally {
                     serialConsole.setText(serialConsole.getText() + "Port closed: " + serialPort.closePort() + "\n");
                 }
                 return null;
            }
           };

       worker.execute();
    }//GEN-LAST:event_existingFileButtonActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        JFileChooser choose = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PanPrinter Print File", new String[] {"osp"});
        choose.setFileFilter(filter);
        int status;
        do
        {
            status = choose.showOpenDialog(null);
        }
        while (status != JFileChooser.APPROVE_OPTION);
        
        File file = choose.getSelectedFile();
        fileOpener(file);
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void fileOpener(File file) {
        boolean hello = false, check = false, osGrid = false;
        String currLine;
        int levels = -1, currLevel = 0;
        String cmd, args0 = "", args1 = "";
        HeatLevel[][] grid = new HeatLevel[15][15];
        String gridSize = "";
        try {
            Scanner fileScanner = new Scanner(file);
            
            do
            {
                currLine = fileScanner.nextLine();
                
                if (currLine.contains(" "))
                {
                    cmd = currLine.substring(0, currLine.indexOf(" "));
                    if (currLine.contains(","))
                    {
                        args0 = currLine.substring(currLine.indexOf(" ") + 1, currLine.indexOf(","));
                        args1 = currLine.substring(currLine.indexOf(",") + 1);
                    }
                    else
                        args0 = currLine.substring(currLine.indexOf(" ") + 1);
                }
                else
                    cmd = currLine;
                switch (cmd)
                {
                    case "helloPanSys": hello = true; break;
                    case "checkCon": check = true; break;
                    case "defMethod": if (args0.equals("OSGrid")) osGrid = true; break;
                    case "gridDef":
                    {
                        gridSize = args0;
                        switch (args0)
                        {
                            case "15C":
                            {
                                grid = new HeatLevel[15][15];
                                gridReseter(grid);
                                tableChanger.setSelectedIndex(INDEX_15C);
                                table15C.setVisible(true);
                                //table16C.setVisible(false);
                                table18C.setVisible(false);
                                //table19C.setVisible(false);
                                repaint();
                                revalidate();
                                break;
                            } 
                            case "16C":
                            {
                                grid = new HeatLevel[16][16];
                                gridReseter(grid);
                                tableChanger.setSelectedIndex(INDEX_16C);
                                table15C.setVisible(false);
                                //table16C.setVisible(true);
                                table18C.setVisible(false);
                                //table19C.setVisible(false);
                                repaint();
                                revalidate();
                                break;
                            }
                            case "18C":
                            {
                                grid = new HeatLevel[18][18];
                                gridReseter(grid);
                                tableChanger.setSelectedIndex(INDEX_18C);
                                table15C.setVisible(false);
                                //table16C.setVisible(false);
                                table18C.setVisible(true);
                                //table19C.setVisible(false);
                                repaint();
                                revalidate();
                                break;
                            }
                            case "19C":
                            {
                                grid = new HeatLevel[19][19];
                                gridReseter(grid);
                                tableChanger.setSelectedIndex(INDEX_19C);
                                table15C.setVisible(false);
                                //table16C.setVisible(false);
                                table18C.setVisible(false);
                                //table19C.setVisible(true);
                                repaint();
                                revalidate();
                                break;
                            }
                        }
                        break;
                    }
                    case "levelsDef": levels = Integer.parseInt(args0); break;
                    case "startPos":
                    {
                        HeatLevel currHeat = HeatLevel.L0;
                        currLevel++;
                        switch (currLevel)
                        {
                            case 1: currHeat = HeatLevel.L1S; break;
                            case 2: currHeat = HeatLevel.L2S; break;
                            case 3: currHeat = HeatLevel.L3S; break;
                            case 4: currHeat = HeatLevel.L4S; break;
                            case 5: currHeat = HeatLevel.L5S; break;
                        }
                        grid[Integer.parseInt(args0)][Integer.parseInt(args1)] = currHeat;
                        break;
                    }
                    case "movTo":
                    {
                        HeatLevel currHeat = HeatLevel.L0;
                        switch (currLevel)
                        {
                            case 1: currHeat = HeatLevel.L1; break;
                            case 2: currHeat = HeatLevel.L2; break;
                            case 3: currHeat = HeatLevel.L3; break;
                            case 4: currHeat = HeatLevel.L4; break;
                            case 5: currHeat = HeatLevel.L5; break;
                        }
                        grid[Integer.parseInt(args0)][Integer.parseInt(args1)] = currHeat;
                        break;
                    }
                }
            }
            while (!currLine.equals("endPrint"));
            if (hello && check && osGrid)
            {
                switch (gridSize)
                {
                    case "15C": table15C.changeBy(grid); break;
                    case "16C": //table16C.changeBy(grid); break;
                    case "18C": table18C.changeBy(grid); break;
                    case "19C": //table19C.changeBy(grid); break;
                }
            }  
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CodeMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void gridReseter(HeatLevel[][] grid) {
        for (int i = 0; i < grid.length; i++)
        {
            for (int j = 0; j < grid[i].length; j++)
                grid[i][j] = HeatLevel.L0;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                _args = args;
                new CodeMaker().setVisible(true);
            }
        });
        
    }
    
    public static void codeUpdate(String code) {
        _code = code;
        code = code.replace("\n", "<br>");
        code = "<html>" + code + "</html>";
        codeScreen.setText(code);
    }
    
    
    public static void printCode(String code) throws SerialPortException {
       SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
           
       @Override
       protected Void doInBackground() throws Exception {
            SerialPort serialPort = new SerialPort(_COM);
            try {
                boolean portOpened = serialPort.openPort();
                serialConsole.setText(serialConsole.getText() + "Port opened: " + portOpened + "\n");
                System.out.println("Port opened: " + portOpened);
                String currLine, tempCode = code;
                Scanner liner = new Scanner(tempCode);
                boolean exit = false;
                while ((currLine = liner.nextLine()) != null && !exit)
                {
                    serialConsole.setText(serialConsole.getText() + currLine + "\n");
                    serialPort.writeString(currLine);
                    System.out.println(currLine);
                    Thread.sleep(3000);
                    String temp = serialPort.readString();
                    serialConsole.setText(serialConsole.getText() + temp + "\n");
                    System.out.println(temp);
                    if (temp.contains("Goodbye!"))
                    {
                        exit = true;
                        boolean portClosed = serialPort.closePort();
                        serialConsole.setText(serialConsole.getText() + "Port closed: " + portClosed + "\n");
                        System.out.println("Port closed: " + portClosed);
                    }
                }
                
                //System.out.println("Params setted: " + serialPort.setParams(9600, 8, 1, 0));
                //System.out.println("\"Hello World!!!\" successfully writen to port: " + serialPort.writeBytes("Hello World!!!".getBytes()));

            }
            catch (SerialPortException ex){
                System.out.println(ex);
            } 
            catch (InterruptedException ex) {
                Logger.getLogger(CodeMaker.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (NoSuchElementException ex) {
                //FOff
            }
            finally {
                serialConsole.setText(serialConsole.getText() + "Port closed: " + serialPort.closePort() + "\n");
            }
            return null;
       }
      };

      worker.execute();
    }

    public static void saveCode(String code) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PanPrinter Print File", new String[] {"osp"});
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = chooser.getSelectedFile();
            if (!file.getName().contains(".osp"))
                file = new File(file.getPath() + ".osp");
            try (PrintWriter out = new PrintWriter(file)) {
                out.println(code);
                out.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CodeMaker.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(file);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel codeScreen;
    private javax.swing.JComboBox comChooser;
    private javax.swing.JButton existingFileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openFileButton;
    private static javax.swing.JTextArea serialConsole;
    private panprinter.Table15x15 table15C;
    private panprinter.Table18x18 table18C;
    private javax.swing.JComboBox tableChanger;
    // End of variables declaration//GEN-END:variables
}
